# ------------------
# General Settings
# ------------------

# Set the default terminal
# set -g default-terminal "${TERM}"
set -g default-terminal "tmux-256color"

# Support ‘direct colour’ RGB escape sequence
set -ga terminal-overrides ",*:Tc"

# allow terminal scrolling
set-option -ga terminal-overrides ',*:smcup@:rmcup@'

# Allows underscore style and colour to be set
set -as terminal-features ",*:usstyle"

# Undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Underscore colors
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# IDK what this does
# set -ga terminal-features ",*:hyperlinks"

# Allow program to bypass tmux
set -gq allow-passthrough on

# Start a non-login shell
# set -g default-shell /bin/sh
set-option -g default-command "${SHELL}"

# Hide statusbar at start
set -g status off

# Set secondary prefix to control-Space
set -g prefix2 C-Space

set -g history-limit 200000
set -g set-clipboard on

# Enable mouse support
setw -g mouse on

# Focus events are requested from terminal
set -g focus-events on

# Update the status line every seconds.
set -g status-interval 1

# Don't wait for escape sequences
set -sg escape-time 0

# Time for which status line messages are displayed
set-option -g display-time 2000

# Time for multiple commands(bound to -r flag) to be entered without pressing prefix again
set -g repeat-time 1000

# Make window/pane index start with 1
set -g base-index 1
setw -g pane-base-index 1

# Automatically renumber windows
set -g renumber-windows on

# Control automatic window renaming
set -gw automatic-rename off

# Use vi-style key bindings in copy mode and status line
setw -g mode-keys vi
set -g status-keys vi

# Enable Mouse Dragging
unbind -T copy-mode-vi MouseDragEnd1Pane

# Set the default title format
set-option -g set-titles-string "#S - #W"

# Monitor windows for activity
setw -g monitor-activity on
set -g visual-activity off
set -g visual-bell off
set -g visual-silence on

# Size windows based on clients
setw -g aggressive-resize on

# Popup border style
set -g popup-border-lines padded

# Allow programs in the pane to change the window name
set -g allow-rename on

# Enable CSI u
set -g extended-keys on
set -sag terminal-features 'xterm*:extkeys'

# --------------
# Key Bindings
# --------------

# Set Ctrl+Space as secondary prefix
bind C-Space send-prefix -2

# For nested tmux sessions
bind a send-prefix

# Disable confiramtion prompt on kill window/pane
bind & kill-window
bind x kill-pane

# Tile all windows
bind = select-layout tiled

# Toggle synchronize panes in a window
bind y set -w synchronize-panes

# Toggle mouse
bind u set -g mouse \; display "Mouse: #{?mouse,ON,OFF}"

# Toggle statusbar
bind Space set status

# Create session
bind C-c new-session

# Find session
bind C-f command-prompt -p find-session 'switch-client -t %%'
bind C-j display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Switch between two most recently used sessions
bind -n C-Tab switch-client -l

# Switch between two most recently used windows
bind C-Space last-window

# Break pane out of window
bind b break-pane -d

# Reload config file
bind R source-file "$XDG_CONFIG_HOME/tmux/tmux.conf"\; display "Reloaded tmux.conf!"

# Change the path for newly created windows
bind c new-window -c "#{pane_current_path}"

# Change the path for newly created splits
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind | split-window -fh -c "#{pane_current_path}"
bind _ split-window -fv -c "#{pane_current_path}"

# Smart pane switching with awareness of vim splits
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|"(^|\/)g?(view|n?vim?)(diff)?$"\/)g?(view|n?vim?)(diff)?$"'
is_vim='echo "#{pane_current_command}" | grep nvim'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-k if-shell "[ #{pane_top} != 0 ]" "send-keys C-k" "select-pane -U"

# Switch to Nth window
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4

# Swap current pane with the next/previous one
bind -r > swap-pane -D
bind -r < swap-pane -U

# Choose which buffer to paste from
bind B choose-buffer

# Enter copy mode and search for hash strings
bind G {
    copy-mode
    send-keys -X search-backward '[A-Fa-f0-9]{7,}'
}

# Enter copy mode
bind -n 'M-[' copy-mode

# Paste the most recent paste buffer
bind -n 'M-]' paste-buffer

# If selection is present clear it else exit copy mode
bind -T copy-mode-vi Escape \
  if -F '#{selection_present}' { send -X clear-selection } { send -X cancel }

bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind-key -T copy-mode-vi C-v \
  if -F '#{selection_present}' \
    { if -F '#{rectangle_toggle}' \
      { send -X rectangle-toggle ; send -X clear-selection } \
      { send -X rectangle-toggle } } \
    { send -X begin-selection ; send -X rectangle-toggle }

bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi Y send-keys -X copy-end-of-line
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Inscremental serach like / and ? in vim
bind-key -T copy-mode-vi / command-prompt -ip "/" { send -X search-forward-incremental '%%' }
bind-key -T copy-mode-vi ? command-prompt -ip "?" { send -X search-backward-incremental '%%' }

bind -T copy-mode-vi u send-keys -X halfpage-up
# Make u and d scroll up/down in copy mode (like a pager)
bind -T copy-mode-vi d send-keys -X halfpage-down

# Copy selection to current command line
bind -T copy-mode-vi C-p send-keys -X pipe-and-cancel 'xargs tmux send-keys -l'

# Rotate panes in clockwise and anti-clockwise direction.
# bind-key -r r rotate-window -D \; select-pane -t :.+
# bind-key -r R rotate-window -U \; select-pane -t :.-

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Move windows
bind-key -n M-H swap-window -t -1\; select-window -t -1
bind-key -n M-L swap-window -t +1\; select-window -t +1

# Resize pane shortcuts
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Toggle keyboard input for panes
# bind < select-pane -d \; display-message "input disabled"
# bind > select-pane -e \; display-message "input enabled"

# Move the current pane to the far left/right/bottom/top
# Similar to `C-w {H,L,J,K}` in Vim.
# bind H split-window -fhb \; swap-pane -t ! \; kill-pane -t !
# bind L split-window -fh  \; swap-pane -t ! \; kill-pane -t !
# bind J split-window -fv  \; swap-pane -t ! \; kill-pane -t !
# bind K split-window -fvb \; swap-pane -t ! \; kill-pane -t !


# Window moving
# bind-key -r ">" swap-window -d -t +1
# bind-key -r "<" swap-window -d -t -1

# Send a pane to another window; enter the destination window
# ":1" or "sessionName.:1"
bind-key S choose-tree -Zw "join-pane -t '%%'"

# Join a pane/window from the current session into the current window
bind @ command-prompt -p "create pane from:" "join-pane -s ':%%'"

# Clear both screen and history
# bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# Search back to last prompt
bind b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward '❯'\; send-keys -X next-word

# navi as a tmux widget
bind-key -T prefix C-g split-window \
  "$SHELL --login -i -c 'navi --print | head -n 1 | tmux load-buffer -b tmp - ; tmux paste-buffer -p -t {last} -b tmp -d'"

# ---------
# Hooks
# ---------

set-hook -g window-linked 'if "[ #{session_windows} -gt 1 ]" "set status on"'
set-hook -g window-unlinked 'if "[ #{session_windows} -lt 2 ]" "set status off"'

# ---------
# Plugins
# ---------

PLUGINS="${XDG_CONFIG_HOME}/tmux/plugins"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'catppuccin/tmux'

# tmux-continuum & tmux-resurrecrt
# set -g @continuum-boot 'on'
set -g @continuum-restore 'off'
set -g @continumm-save-interval '10'

set -g @resurrect-capture-pane-contents 'on'
# set -g @resurrect-strategy-nvim 'session' # it sucks for me

# catppuccin
set -g @catppuccin_window_right_separator "█ "

set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#{b:pane_current_command}"

set -g @catppuccin_status_modules_right "directory session"
set -g @catppuccin_status_left_separator " █"
set -g @catppuccin_session_icon ""

# Bootstrap tpm
if "test ! -d $PLUGINS/tpm" \
   "run \"git clone --filter=blob:none --single-branch https://github.com/tmux-plugins/tpm $PLUGINS/tpm\""

# Initialize TMUX plugin manager
run -b "$PLUGINS/tpm/tpm"
